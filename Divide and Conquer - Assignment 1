class Tester {

    public static int findMaxSum(int arr[], int low, int high) {
        if (low == high) {
            return arr[low]; // Base case: Only one element
        }

        int mid = (low + high) / 2;

        // Find maximum sum in left subarray
        int leftMax = findMaxSum(arr, low, mid);

        // Find maximum sum in right subarray
        int rightMax = findMaxSum(arr, mid + 1, high);

        // Find maximum sum in subarray crossing the middle element
        int crossMax = findMaxCrossingSubarraySum(arr, low, mid, high);

        // Return the maximum of the three
        return Math.max(Math.max(leftMax, rightMax), crossMax);
    }

    public static int findMaxCrossingSubarraySum(int arr[], int low, int mid, int high) {
        // Calculate maximum sum of subarray containing the middle element
        int leftSum = Integer.MIN_VALUE;
        int sum = 0;
        for (int i = mid; i >= low; i--) {
            sum += arr[i];
            if (sum > leftSum) {
                leftSum = sum;
            }
        }

        int rightSum = Integer.MIN_VALUE;
        sum = 0;
        for (int i = mid + 1; i <= high; i++) {
            sum += arr[i];
            if (sum > rightSum) {
                rightSum = sum;
            }
        }

        // Return sum of elements on left and right of mid
        return leftSum + rightSum;
    }

    public static void main(String[] args) {
        // Test case 1
        int arr1[] = { -2, -5, 6, -2, -3, 1, 5, -6 };
        System.out.println("Maximum sum for arr1: " + findMaxSum(arr1, 0, arr1.length - 1));

        // Test case 2
        int arr2[] = { -2, 1, -3, 4, -1, 2, 1, -5, 4 };
        System.out.println("Maximum sum for arr2: " + findMaxSum(arr2, 0, arr2.length - 1));
    }
}
