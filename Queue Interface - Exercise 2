import java.util.Deque;
import java.util.ArrayDeque;

class Tester {
    
    public static Deque<Integer> changeSmallest(Deque<Integer> inputStack) {
        if (inputStack.isEmpty()) {
            return inputStack;
        }
        
        Deque<Integer> resultStack = new ArrayDeque<>();
        int smallest = Integer.MAX_VALUE;
        int countSmallest = 0;
        
        // Find the smallest value and count its occurrences
        while (!inputStack.isEmpty()) {
            int current = inputStack.pop();
            if (current < smallest) {
                smallest = current;
                countSmallest = 1;
            } else if (current == smallest) {
                countSmallest++;
            }
            resultStack.push(current);
        }
        
        // Move all occurrences of the smallest value to the bottom
        int size = resultStack.size();
        int count = 0;
        while (count < size) {
            int current = resultStack.pop();
            if (current != smallest) {
                resultStack.push(current);
            }
            count++;
        }
        
        // Push all occurrences of the smallest value to the bottom
        for (int i = 0; i < countSmallest; i++) {
            resultStack.push(smallest);
        }
        
        return resultStack;
    }

    public static void main(String[] args) {
        Deque<Integer> inputStack = new ArrayDeque<>();
        inputStack.push(10);
        inputStack.push(8);
        inputStack.push(5);
        inputStack.push(12);
        inputStack.push(5);
        
        Deque<Integer> updatedStack = changeSmallest(inputStack);
        
        System.out.println("Stack After Modification:");
        for (Integer value : updatedStack) {
            System.out.println(value);
        }
    }
}
