class Tester {

    public static int findMaxActivities(int[] start, int[] finish) {
        int n = start.length;
        
        // Base case
        if (n <= 1)
            return n;
        
        // Sort activities based on finish time (ascending order)
        sortActivitiesByFinishTime(start, finish);
        
        // Initialize variables
        int maxActivities = 1;
        int lastFinishTime = finish[0];
        
        // Iterate through the activities
        for (int i = 1; i < n; i++) {
            if (start[i] >= lastFinishTime) {
                // Select this activity
                maxActivities++;
                lastFinishTime = finish[i];
            }
        }
        
        return maxActivities;
    }
    
    // Helper method to sort activities based on finish time
    private static void sortActivitiesByFinishTime(int[] start, int[] finish) {
        int n = start.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (finish[i] > finish[j]) {
                    // Swap finish times
                    int tempFinish = finish[i];
                    finish[i] = finish[j];
                    finish[j] = tempFinish;
                    
                    // Swap start times accordingly
                    int tempStart = start[i];
                    start[i] = start[j];
                    start[j] = tempStart;
                }
            }
        }
    }
    
    public static void main(String[] args) {
        int[] start1 = {1, 3, 0, 5, 8, 5};
        int[] finish1 = {2, 4, 6, 7, 9, 9};
        
        int[] start2 = {1, 3, 0, 5, 9, 8};
        int[] finish2 = {3, 5, 8, 10, 12, 13};
        
        System.out.println("Maximum number of activities for input 1: " + findMaxActivities(start1, finish1));
        System.out.println("Maximum number of activities for input 2: " + findMaxActivities(start2, finish2));
    }
}
